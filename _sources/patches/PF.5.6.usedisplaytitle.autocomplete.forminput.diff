diff --git a/includes/PF_AutocompleteAPI.php b/includes/PF_AutocompleteAPI.php
index 095e67a5..d38e7d88 100644
--- a/includes/PF_AutocompleteAPI.php
+++ b/includes/PF_AutocompleteAPI.php
@@ -19,6 +19,8 @@ class PFAutocompleteAPI extends ApiBase {
 	}
 
 	public function execute() {
+		global $wgPageFormsUseDisplayTitle;
+
 		$params = $this->extractRequestParams();
 		$substr = $params['substr'];
 		$namespace = $params['namespace'];
@@ -35,13 +37,20 @@ class PFAutocompleteAPI extends ApiBase {
 		$base_cargo_table = $params['base_cargo_table'];
 		$base_cargo_field = $params['base_cargo_field'];
 		$basevalue = $params['basevalue'];
+		// Allow to provide override parameter for display title use
+		// Will fall back to $wgPageFormsUseDisplayTitle if not provided
+		$usedisplaytitle = $params['usedisplaytitle'];
+		if ( isset($usedisplaytitle) ) {
+			$usedisplaytitle = $usedisplaytitle == 'true' ? true : false;
+		}else{
+			$usedisplaytitle = $wgPageFormsUseDisplayTitle;
+		}
 		// $limit = $params['limit'];
 
 		if ( $baseprop === null && $base_cargo_table === null && strlen( $substr ) == 0 ) {
 			$this->dieWithError( [ 'apierror-missingparam', 'substr' ], 'param_substr' );
 		}
 
-		global $wgPageFormsUseDisplayTitle;
 		$map = false;
 		if ( $baseprop !== null ) {
 			if ( $property !== null ) {
@@ -52,29 +61,28 @@ class PFAutocompleteAPI extends ApiBase {
 		} elseif ( $wikidata !== null ) {
 			$data = PFValuesUtils::getAllValuesFromWikidata( urlencode( $wikidata ), $substr );
 		} elseif ( $category !== null ) {
-			$data = PFValuesUtils::getAllPagesForCategory( $category, 3, $substr );
-			$map = $wgPageFormsUseDisplayTitle;
-			if ( $map ) {
+			$data = PFValuesUtils::getAllPagesForCategory( $category, 3, $substr, $usedisplaytitle );
+			if ( $usedisplaytitle ) {
+				$map = true;
 				$data = PFMappingUtils::disambiguateLabels( $data );
 			}
 		} elseif ( $concept !== null ) {
 			$data = PFValuesUtils::getAllPagesForConcept( $concept, $substr );
-			$map = $wgPageFormsUseDisplayTitle;
-			if ( $map ) {
+			if ( $usedisplaytitle ) {
+				$map = true;
 				$data = PFMappingUtils::disambiguateLabels( $data );
 			}
 		} elseif ( $query !== null ) {
 			$query = PFValuesUtils::processSemanticQuery( $query, $substr );
 			$data = PFValuesUtils::getAllPagesForQuery( $query );
-			$map = $wgPageFormsUseDisplayTitle;
-			if ( $map ) {
+			if ( $usedisplaytitle ) {
+				$map = true;
 				$data = PFMappingUtils::disambiguateLabels( $data );
 			}
 		} elseif ( $cargo_table !== null && $cargo_field !== null ) {
 			$data = self::getAllValuesForCargoField( $cargo_table, $cargo_field, $cargo_where, $substr, $base_cargo_table, $base_cargo_field, $basevalue );
 		} elseif ( $namespace !== null ) {
 			$data = PFValuesUtils::getAllPagesForNamespace( $namespace, $substr );
-			$map = $wgPageFormsUseDisplayTitle;
 		} elseif ( $external_url !== null ) {
 			$data = PFValuesUtils::getValuesFromExternalURL( $external_url, $substr );
 		} else {
@@ -154,6 +162,7 @@ class PFAutocompleteAPI extends ApiBase {
 			'base_cargo_table' => null,
 			'base_cargo_field' => null,
 			'basevalue' => null,
+			'usedisplaytitle' => null,
 		];
 	}
 
@@ -169,6 +178,7 @@ class PFAutocompleteAPI extends ApiBase {
 			'external_url' => 'Alias for external URL from which to get values',
 			'baseprop' => 'A previous property in the form to check against',
 			'basevalue' => 'The value to check for the previous property',
+			'usedisplaytitle' => 'The flag to use or not displaytitle for search',
 			// 'limit' => 'Limit how many entries to return',
 		];
 	}
diff --git a/includes/PF_ValuesUtils.php b/includes/PF_ValuesUtils.php
index 336f86c4..f9603265 100644
--- a/includes/PF_ValuesUtils.php
+++ b/includes/PF_ValuesUtils.php
@@ -265,13 +265,13 @@ SERVICE wikibase:label { bd:serviceParam wikibase:language \"" . $wgLanguageCode
 	 * @param string $top_category
 	 * @param int $num_levels
 	 * @param string|null $substring
+	 * @param string|false $usedisplaytitle
 	 * @return string[]
 	 */
-	public static function getAllPagesForCategory( $top_category, $num_levels, $substring = null ) {
+	public static function getAllPagesForCategory( $top_category, $num_levels, $substring = null, $usedisplaytitle = false ) {
 		if ( $num_levels == 0 ) {
 			return [ $top_category ];
 		}
-		global $wgPageFormsUseDisplayTitle;
 
 		$db = wfGetDB( DB_REPLICA );
 		$top_category = str_replace( ' ', '_', $top_category );
@@ -287,7 +287,7 @@ SERVICE wikibase:label { bd:serviceParam wikibase:language \"" . $wgLanguageCode
 				$conditions = [];
 				$conditions[] = 'cl_from = page_id';
 				$conditions['cl_to'] = $category;
-				if ( $wgPageFormsUseDisplayTitle ) {
+				if ( $usedisplaytitle ) {
 					$tables['pp_displaytitle'] = 'page_props';
 					$tables['pp_defaultsort'] = 'page_props';
 					$columns['pp_displaytitle_value'] = 'pp_displaytitle.pp_value';
@@ -655,11 +655,18 @@ SERVICE wikibase:label { bd:serviceParam wikibase:language \"" . $wgLanguageCode
 	 * @param string $source_type
 	 * @return string[]
 	 */
-	public static function getAutocompleteValues( $source_name, $source_type ) {
+	public static function getAutocompleteValues( $source_name, $source_type, $usedisplaytitle = null ) {
+		global $wgPageFormsUseDisplayTitle;
+
 		if ( $source_name === null ) {
 			return [];
 		}
 
+		// Fallback to default config value if no override is defined
+		if ( $usedisplaytitle === null ) {
+			$usedisplaytitle = $wgPageFormsUseDisplayTitle;
+		}
+
 		// The query depends on whether this is a Cargo field, SMW
 		// property, category, SMW concept or namespace.
 		if ( $source_type == 'cargo field' ) {
@@ -675,7 +682,7 @@ SERVICE wikibase:label { bd:serviceParam wikibase:language \"" . $wgLanguageCode
 		} elseif ( $source_type == 'property' ) {
 			$names_array = self::getAllValuesForProperty( $source_name );
 		} elseif ( $source_type == 'category' ) {
-			$names_array = self::getAllPagesForCategory( $source_name, 10 );
+			$names_array = self::getAllPagesForCategory( $source_name, 10, null, $usedisplaytitle );
 		} elseif ( $source_type == 'concept' ) {
 			$names_array = self::getAllPagesForConcept( $source_name );
 		} elseif ( $source_type == 'query' ) {
diff --git a/includes/parserfunctions/PF_FormInputParserFunction.php b/includes/parserfunctions/PF_FormInputParserFunction.php
index 76fbd8ca..ad573b27 100644
--- a/includes/parserfunctions/PF_FormInputParserFunction.php
+++ b/includes/parserfunctions/PF_FormInputParserFunction.php
@@ -61,6 +61,7 @@ class PFFormInputParserFunction {
 		$inPlaceholder = null;
 		$inAutofocus = true;
 		$hasPopup = $hasReturnTo = false;
+		$useDisplayTitle = null;
 
 		// Assign params.
 		foreach ( $params as $i => $param ) {
@@ -108,6 +109,8 @@ class PFFormInputParserFunction {
 				$inQueryArr['reload'] = '1';
 			} elseif ( $paramName == 'no autofocus' ) {
 				$inAutofocus = false;
+			} elseif ( $paramName == 'usedisplaytitle' ) {
+				$useDisplayTitle = $value;
 			} else {
 				$value = urlencode( $value );
 				parse_str( "$paramName=$value", $arr );
@@ -141,6 +144,9 @@ class PFFormInputParserFunction {
 			$formInputAttrs['data-possible-namespaces'] = $possibleNamespacesStr;
 		}
 
+		if ( $useDisplayTitle !== null ) {
+			$formInputAttrs['data-usedisplaytitle'] = $useDisplayTitle;
+		}
 		if ( $inPlaceholder != null ) {
 			$formInputAttrs['data-placeholder'] = $inPlaceholder;
 		}
diff --git a/libs/PF_AutocompleteWidget.js b/libs/PF_AutocompleteWidget.js
index 330089ef..a2f8f474 100644
--- a/libs/PF_AutocompleteWidget.js
+++ b/libs/PF_AutocompleteWidget.js
@@ -83,6 +83,10 @@ pf.AutocompleteWidget.prototype.getLookupRequest = function() {
 		requestParams.namespace = this.config.autocompletesettings;
 	}
 
+	if ( typeof this.config.usedisplaytitle !== 'undefined' ) {
+		requestParams.usedisplaytitle = this.config.usedisplaytitle;
+	}
+
 	return api.get( requestParams );
 };
 /**
diff --git a/libs/PF_formInput.js b/libs/PF_formInput.js
index 0d336a75..35e1a4f2 100644
--- a/libs/PF_formInput.js
+++ b/libs/PF_formInput.js
@@ -42,6 +42,9 @@
 			}
 		}
 
+		if ( this.attr('data-usedisplaytitle') !== undefined ) {
+			autocompleteWidgetConfig['usedisplaytitle'] = this.attr('data-usedisplaytitle');
+		}
 		if ( this.attr('data-default-value') !== undefined ) {
 			autocompleteWidgetConfig['value'] = this.attr('data-default-value');
 		}
