name: Docker build and push

# limit concurrency
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#examples-using-concurrency-and-the-default-behavior
concurrency: docker_taqasta_main

on:
  push:
    # Only activate for `master` branch
    branches:
      - master
    # Plus for all tags
    tags:
      - '*'

  # Plus for any pull-requests
  pull_request:

env:
  IMAGE_NAME: taqasta

jobs:
  # Lint the image Dockerfile syntax using https://github.com/replicatedhq/dockerfilelint
  lint:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Validate YAML
        run: bash validate.sh

      - name: Compile
        run: bash compile.sh

      -
        name: Run linter (hadolint)
        uses: vedmaka/hadolint-action@master
        with:
          dockerfile: "Dockerfile"
          config: "hadolint.yaml"

  # Generate image tags
  # The image tag pattern is:
  # for pull-requests: <MW_CORE_VERSION>-<DATE>-<PR_NUMBER>, eg: 1.35.2-20210125-25
  # for tags: <TAG>
  # for `master` branch: latest + <MW_VERSION>-latest + <MW_CORE_VERSION>-<DATE>-<SHA>
  # <MW_CORE_VERSION> being parsed from the Dockerfile
  tags:
    needs: [lint]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    outputs:
      REGISTRY_TAGS: ${{ steps.generate.outputs.REGISTRY_TAGS }}
      REGISTRY_TAGS_VERSION: ${{ steps.generate.outputs.REGISTRY_TAGS_VERSION }}
      REGISTRY_TAGS_PR_NUMBER: ${{ steps.generate.outputs.REGISTRY_TAGS_PR_NUMBER }}
      SHA_SHORT: ${{ steps.generate.outputs.SHA_SHORT }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compile
        run: bash compile.sh

      -
        name: Generate tags
        id: generate
        run: |

          # Image ID
          IMAGE_ID=ghcr.io/wikiteq/$IMAGE_NAME

          # Date
          BDATE=$(date +%Y%m%d)

          # Extract MW version from Dockerfile
          MEDIAWIKI_VERSION=$(sed -nr 's/MW_CORE_VERSION\=([0-9\.]+)/\1/p' Dockerfile | sed "s/ \\\//" | sed "s/\t//")
          # Extract MW major version (like 1.35)
          MEDIAWIKI_MAJOR_VERSION=${MEDIAWIKI_VERSION%.*}

          # Change all uppercase to lowercase, just in case
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version and use it as suffix for version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Get the Taqasta version from the "VERSION" file
          TAQASTA_VERSION=$(cat VERSION)

          # For pull requests just extract the PR number
          PR_NUMBER=""
          [ "${{ github.event_name }}" == "pull_request" ] && VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\)/merge,\1,')
          [ "${{ github.event_name }}" == "pull_request" ] && PR_NUMBER=$VERSION

          # Append version
          [ "${{ github.event_name }}" == "pull_request" ] && VERSION=$MEDIAWIKI_VERSION-$BDATE-$VERSION

          # Strip "v" prefix from tag name if it's a tag
          # [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention if it's a master branch build
          [ "$VERSION" == "master" ] && VERSION=latest

          # Compose REGISTRY_TAGS variable
          REGISTRY_TAGS=$IMAGE_ID:$VERSION

          # For master branch also supply an extra tag: <MW_VERSION>-latest,<MW_VERSION>-<DATE>-<SHA>
          [ "$VERSION" == "latest" ] && REGISTRY_TAGS=$REGISTRY_TAGS,$IMAGE_ID:$TAQASTA_VERSION,$IMAGE_ID:$MEDIAWIKI_MAJOR_VERSION-latest,$IMAGE_ID:$MEDIAWIKI_VERSION-latest,$IMAGE_ID:$MEDIAWIKI_VERSION-$BDATE-$(git rev-parse --short HEAD)

          SHA_SHORT=${{ github.sha }}
          [ "${{ github.event_name }}" == "pull_request" ] && SHA_SHORT=$(echo ${{ github.event.pull_request.head.sha }} | cut -c1-8)

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          echo REGISTRY_TAGS=$REGISTRY_TAGS
          echo SHA_SHORT=$SHA_SHORT
          echo EventName=${{ github.event_name }}

          echo headref=${{ github.head_ref }}
          echo "Final image tag to be pushed:"
          echo $REGISTRY_TAGS
          echo "REGISTRY_TAGS=$REGISTRY_TAGS" >> $GITHUB_OUTPUT
          echo "REGISTRY_TAGS_VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "REGISTRY_TAGS_PR_NUMBER=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "SHA_SHORT=$SHA_SHORT" >> $GITHUB_OUTPUT

  # Pre-build the image, deploy via compose and run e2e
  deploy-e2e:
    needs: [tags]
    timeout-minutes: 60
    outputs:
      pages_url: ${{ steps.deployment_pages.outputs.page_url }}
      report-uploaded: ${{ steps.report-playwright-tests.outputs.was-uploaded }}
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compile
        run: bash compile.sh

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          platforms: linux/amd64

      # We could perform the build in a separate job, but why for? let's save some bandwidth on caches
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          secrets: |
            COMPOSER_TOKEN=${{ secrets.GITHUB_TOKEN }}
          push: false
          tags: ${{ needs.tags.outputs.REGISTRY_TAGS }}
          cache-from: type=gha,scope=taqasta-amd64,timeout=60m
          cache-to: type=gha,mode=max,scope=taqasta-amd64,timeout=60m
          load: true

      - name: Set up environment
        shell: bash
        run: mv .env.ci .env

      - name: Setup Docker Compose
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCKER_BUILDKIT: 1
        shell: bash
        run: DOCKER_BUILDKIT=1 docker compose up -d

      - name: Wait for init
        shell: bash
        run: while !  docker compose logs web --tail 10 | grep -q '>>>>> run-maintenance-script.sh <<<<<'; do sleep 1; done

      - name: Wait for container to be healthy
        shell: bash
        run: while ! docker inspect --format='{{json .State.Health.Status}}' $(echo $(basename $(pwd)) | tr '[:upper:]' '[:lower:]')-web-1 | grep -q 'healthy'; do sleep 1; done

      # todo, migrate to docker image? https://playwright.dev/docs/docker
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        working-directory: ./e2e
        run: npm ci
      - name: Install Playwright Browsers
        working-directory: ./e2e
        run: npx playwright install chromium --with-deps
      - name: Run Playwright tests
        id: run-playwright-tests
        working-directory: ./e2e
        run: npx playwright test

      - name: Upload screenshots as a github-pages artifact
        uses: actions/upload-pages-artifact@v3
        # Only if the actual tests failed, if something else earlier in the
        # job failed then the tests wouldn't have been run and the report
        # would not exist to upload
        if: failure() && steps.run-playwright-tests.outcome == 'failure'
        with:
          name: playwright-report
          path: e2e/playwright-report/
          retention-days: 7

      # Need a way to communicate to the report-pages job whether or not we
      # uploaded a report; only way that seems to be possible is to use an
      # output from a step (here) and output that from the overall job (above)
      # and then check that in the report-pages job (below). Since the overall
      # output gets extracted from a single step, and steps need to have unique
      # ids, cannot have two different steps that run under the two possible
      # conditions, need to have a single step that checks the conditions
      - name: Output if a report was uploaded
        id: report-playwright-tests
        if: always()
        shell: bash
        run: |
          if ${{ steps.run-playwright-tests.outcome == 'failure' }}; then
            echo "was-uploaded=yes" >> $GITHUB_OUTPUT
          else
            echo "was-uploaded=no" >> $GITHUB_OUTPUT
          fi

      - name: Stop containers
        if: always()
        shell: bash
        run: docker compose down --volumes --timeout 60

  # Builds from cache & push the image to GitHub registry this time
  # see https://github.com/orgs/community/discussions/148648#discussioncomment-12144381 merge?
  push:
    strategy:
      matrix:
        platform: [ amd64, arm64 ]
    needs: [tags,deploy-e2e]
    # see https://github.blog/changelog/2025-01-16-linux-arm64-hosted-runners-now-available-for-free-in-public-repositories-public-preview/
    runs-on: ${{ matrix.platform == 'arm64' && 'ubuntu-24.04-arm64' || 'ubuntu-latest' }}
    outputs:
      digest: ${{ steps.docker_build.outputs.digest }}
      imageid: ${{ steps.docker_build.outputs.imageid }}
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Compile
        run: bash compile.sh
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          platforms: linux/${{ matrix.platform }}
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          # we expect the cache for amd64 to be used here so no actual amd64 build to happen
          platforms: linux/${{ matrix.platform }}
          secrets: |
            COMPOSER_TOKEN=${{ secrets.GITHUB_TOKEN }}
          push: true
          tags: ${{ needs.tags.outputs.REGISTRY_TAGS }}
          cache-from: type=gha,scope=taqasta-${{ matrix.platform }},timeout=60m
          cache-to: type=gha,mode=max,scope=taqasta-${{ matrix.platform }},timeout=60m
      -
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
      -
        name: Image tags debug
        run: echo ${{ needs.tags.outputs.REGISTRY_TAGS }}

  # Send a message to the PR thread
  notify:
    needs: [tags,push]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      -
        name: Notify about image tag
        if: github.event_name == 'pull_request' && needs.push.outputs.digest != ''
        uses: hasura/comment-progress@v2.3.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          number: ${{ github.event.number }}
          id: comment
          message: ":whale: The image based on [${{ needs.tags.outputs.SHA_SHORT }}](https://github.com/WikiTeq/Taqasta/pull/${{ needs.tags.outputs.REGISTRY_TAGS_PR_NUMBER }}/commits/${{ github.event.pull_request.head.sha }}) commit has been built with `${{ needs.tags.outputs.REGISTRY_TAGS_VERSION }}` tag as [${{ needs.tags.outputs.REGISTRY_TAGS }}](https://github.com/${{ github.repository }}/pkgs/container/${{ env.IMAGE_NAME }}/${{ needs.push.outputs.imageid }}?tag=${{ needs.tags.outputs.REGISTRY_TAGS_VERSION }})"
          recreate: true
          fail: false

  report-pages:
    needs: [deploy-e2e]
    runs-on: ubuntu-latest
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment_pages.outputs.page_url }}
    if: failure() && (needs.deploy-e2e.outputs.report-uploaded == 'yes') && ( github.event_name == 'push' || github.event_name == 'pull_request' )
    steps:
      - name: Deploy to GitHub Pages
        id: deployment_pages
        uses: actions/deploy-pages@v4
        with:
          artifact_name: playwright-report
          token: ${{ secrets.GITHUB_TOKEN }}
